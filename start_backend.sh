#!/bin/bash

# Script simple pour d√©marrer uniquement le backend DJ-4LED

echo "üéµ DJ-4LED Backend"
echo "=================="
echo ""

# Couleurs pour l'affichage
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RED='\033[0;31m'
NC='\033[0m'

# Obtenir le r√©pertoire du script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# V√©rifier la connexion r√©seau rapidement
echo -e "${CYAN}üì° V√©rification des contr√¥leurs...${NC}"
CONTROLLERS_OK=0
for ip in 192.168.1.45 192.168.1.46 192.168.1.47 192.168.1.48; do
    if ping -c 1 -W 1 $ip > /dev/null 2>&1; then
        ((CONTROLLERS_OK++))
    fi
done

if [ $CONTROLLERS_OK -gt 0 ]; then
    echo -e "${GREEN}‚úÖ $CONTROLLERS_OK/4 contr√¥leurs d√©tect√©s${NC}"
    MODE_ARGS="--production"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aucun contr√¥leur d√©tect√© - Mode test activ√©${NC}"
    MODE_ARGS="--production --test"
fi

# V√©rifier si le port UDP est d√©j√† utilis√©
echo -e "${CYAN}üîç V√©rification du port UDP 8081...${NC}"
if lsof -i :8081 > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Le port UDP 8081 est d√©j√† utilis√©${NC}"
    echo "Processus utilisant le port:"
    lsof -i :8081
    echo ""
    echo "Arr√™tez le processus existant avec: kill \$(lsof -t -i :8081)"
    exit 1
fi
echo -e "${GREEN}‚úÖ Port UDP 8081 disponible${NC}"

# Trouver le dossier backend
if [ -d "apps/backend" ]; then
    BACKEND_DIR="apps/backend"
elif [ -d "backend" ]; then
    BACKEND_DIR="backend"
else
    echo -e "${RED}‚ùå Impossible de trouver le dossier backend${NC}"
    exit 1
fi

# Compiler si n√©cessaire
echo -e "${CYAN}üî® Compilation du backend...${NC}"
cd "$BACKEND_DIR"

if [ ! -f "target/release/led-visualizer" ] || [ "src/main.rs" -nt "target/release/led-visualizer" ]; then
    echo "   Compilation en cours..."
    cargo build --release
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Erreur lors de la compilation${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Compilation termin√©e${NC}"
else
    echo -e "${GREEN}‚úÖ Binaire d√©j√† compil√©${NC}"
fi

# Copier la configuration vivid si elle existe
if [ -f "../config.vivid.toml" ]; then
    cp "../config.vivid.toml" config.toml
    echo -e "${GREEN}‚úÖ Configuration couleurs vives appliqu√©e${NC}"
elif [ -f "../../config.vivid.toml" ]; then
    cp "../../config.vivid.toml" config.toml
    echo -e "${GREEN}‚úÖ Configuration couleurs vives appliqu√©e${NC}"
fi

# Fonction de nettoyage
cleanup() {
    echo ""
    echo -e "${CYAN}üõë Arr√™t du backend...${NC}"
    if [ ! -z "$BACKEND_PID" ]; then
        kill $BACKEND_PID 2>/dev/null
        wait $BACKEND_PID 2>/dev/null
    fi
    exit 0
}

trap cleanup INT TERM

# D√©marrer le backend
echo ""
echo -e "${CYAN}üéµ D√©marrage du backend...${NC}"
echo -e "${CYAN}üîå Serveur UDP sur :${NC} udp://0.0.0.0:8081"
echo ""

./target/release/led-visualizer $MODE_ARGS &
BACKEND_PID=$!

# V√©rifier que le backend a bien d√©marr√©
sleep 2
if ! kill -0 $BACKEND_PID 2>/dev/null; then
    echo -e "${RED}‚ùå Le backend n'a pas pu d√©marrer${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Backend d√©marr√© avec succ√®s !${NC}"
echo ""
echo "========================================"
echo -e "${YELLOW}üí° Informations :${NC}"
echo "   ‚Ä¢ Serveur UDP : udp://0.0.0.0:8081"
echo "   ‚Ä¢ Mode : $MODE_ARGS"
echo "   ‚Ä¢ PID : $BACKEND_PID"
echo ""
echo -e "${CYAN}üìä Commandes :${NC}"
echo "   ‚Ä¢ Ctrl+C pour arr√™ter"
echo "   ‚Ä¢ Logs en temps r√©el ci-dessous"
echo ""
echo "========================================"

if [[ "$MODE_ARGS" == *"--test"* ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Mode test audio (simulation)${NC}"
    echo ""
fi

# Attendre que le backend se termine
wait $BACKEND_PID
